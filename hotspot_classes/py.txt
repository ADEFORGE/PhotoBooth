partie serveur flask

# Active la synchronisation NTP automatique
sudo timedatectl set-ntp true

# Vérifie la date
timedatectl

sudo date -s "2025-07-04 12:00:00"


sudo apt update
sudo apt install python3 python3-pip python3-flask python3-pil

python3 - <<'EOF'
import flask, PIL
print("Flask", flask.__version__)
print("Pillow", PIL.__version__)
EOF


mkdir -p ~/flask_rpi
cd ~/flask_rpi

nano app.py


chmod +x ~/flask_rpi/app.py

sudo nano /etc/systemd/system/flask_rpi.service



chmod +x app.py
sudo systemctl daemon-reload
sudo systemctl enable flask_rpi.service
sudo systemctl start flask_rpi.service
sudo systemctl restart flask_rpi.service
sudo systemctl status flask_rpi.service



sudo apt install python3-flask python3-pil hostapd dnsmasq nodogsplash
pip3 install qrcode


# a) Remettre wlan0 en place avec son IP statique
sudo ip link set wlan0 down
sudo ip addr flush dev wlan0
sudo ip addr add 192.168.5.1/24 dev wlan0
sudo ip link set wlan0 up

# b) Redémarrer hostapd (le point d’accès)
sudo systemctl restart hostapd

# c) Redémarrer dnsmasq (DHCP/DNS captive)
sudo systemctl restart dnsmasq

# d) Redémarrer Nodogsplash (portail captif)
sudo systemctl restart nodogsplash

# e) Vérifier que tout est UP
sudo systemctl status hostapd --no-pager
sudo systemctl status dnsmasq --no-pager
sudo systemctl status nodogsplash --no-pager






Pense à créer /etc/nodogsplash/htdocs/splash_template.html ainsi :

html
Copy
Edit
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Hotspot Image</title>
</head>
<body>
  <!-- IMAGE_PLACEHOLDER -->
  <!-- QR_PLACEHOLDER -->
</body>
</html>
Ensuite, relance ton service :

bash
Copy
Edit
sudo systemctl restart flask_rpi.service


sudo systemctl status flask_rpi.service
Ping la Pi en Ethernet :

powershell
Copy
Edit
ping 192.168.10.2



Même si tu peux pinguer la Pi sur `192.168.10.2`, l’erreur **10061** signifie que **rien n’écoute le port 5000** à ce moment‑là. Voici comment tu peux le résoudre :

---

## 1. Vérifier que le serveur Flask tourne bien

Sur ta Raspberry Pi, exécute :

```bash
sudo systemctl status flask_rpi.service
```

Tu dois voir :

```
Active: active (running) since ...
```

* Si c’est **inactive** ou **failed**, redémarre-le :

  ```bash
  sudo systemctl restart flask_rpi.service
  ```
* Vérifie les logs pour comprendre un éventuel échec :

  ```bash
  journalctl -u flask_rpi.service -n 20 --no-pager
  ```

---

## 2. Vérifier que Flask écoute sur le port 5000

Toujours sur la Pi :

```bash
sudo ss -tlnp | grep 5000
```

Tu devrais voir une ligne du genre :

```
LISTEN  0  128  0.0.0.0:5000  0.0.0.0:*  users:(("python3",pid=1234,fd=3))
```

* Si rien n’apparaît, cela veut dire que Flask n’est pas lancé ou qu’il écoute seulement sur `127.0.0.1`.
* Dans ce cas, relance-le en mode débug pour voir les erreurs :

  ```bash
  cd ~/flask_rpi
  ./app.py
  ```

  Vérifie qu’il renvoie :

  ```
   * Running on http://0.0.0.0:5000/
  ```

---

## 3. Assure-toi qu’il n’y a pas de firewall qui bloque

Si tu utilises `ufw` ou `iptables` :

```bash
sudo ufw status
# ou
sudo iptables -L INPUT -n
```

Autorise le port 5000 en TCP si nécessaire :

```bash
sudo ufw allow 5000/tcp
```

---

## 4. Retester depuis le PC

Une fois que :

* `flask_rpi.service` est **active (running)**
* et que `ss -tlnp` montre bien le port 5000
* et qu’aucun firewall ne bloque

Tu relances sur Windows ou Ubuntu :

```powershell
python3 .\hotspot_client.py .\in_image.png
```

Tu ne devrais plus avoir la **connection refused**.

---

### Récapitulatif rapide

1. **Sur la Pi**

   * `sudo systemctl status flask_rpi.service`
   * `sudo systemctl restart flask_rpi.service`
   * `journalctl -u flask_rpi.service -n 20`
   * `sudo ss -tlnp | grep 5000`
   * (éventuellement) `sudo ufw allow 5000/tcp`

2. **Sur le PC**

   * Vérifier que tu es toujours en Ethernet vers `192.168.10.2`
   * Lancer de nouveau le client

Dis-moi ce que tu obtiens !
